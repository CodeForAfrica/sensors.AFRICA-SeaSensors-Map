{"version":3,"sources":["utils/data.tsx","components/Mapbox.tsx","components/Filter.tsx","components/Counter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["applyPrecision","coordinates","map","c","Number","toFixed","uniqueCoordinates","data","set","Set","features","feature","geometry","join","Array","from","str","split","circlesSource","centers","radiusInKm","points","arguments","length","undefined","type","center","theta","x","y","coords","km","ret","distanceX","Math","cos","PI","distanceY","i","sin","push","lineSource","distanceInKm","forEach","properties","filter","f","concat","property","bearing","Map","ReactMapboxGl","accessToken","process","style","mapboxStyle","Mapbox","_ref","filters","sensorCoordinates","_useState","useState","_useState2","Object","slicedToArray","blastLinesFilter","setBlastLinesFilter","useEffect","filtersToApply","found","find","toConsumableArray","react_default","a","createElement","zoom","containerStyle","height","width","lib_esm","position","id","paint","circle-color","circle-opacity","geoJsonSource","sourceId","fill-color","fill-opacity","layout","line-join","line-cap","line-color","line-width","useStyles","makeStyles","theme","root","zIndex","lineHeight","marginTop","marginLeft","marginBottom","boxShadow","overflow","backgroundColor","header","display","color","padding","filterGroup","marginRight","& input[type=\"checkbox\"]","appearance","filterTitle","filterLabel","alignItems","Filter","onFilter","classes","filterGroupRef","createRef","className","ref","onClick","current","inputs","querySelectorAll","checked","element","e","name","value","flexGrow","top","right","flexDirection","justifyContent","container","label","sensorNumber","blastsNumber","Counter","numberOfSensors","numberOfBlasts","App","setFilter","blastData","react","components_Mapbox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28cdf6aa.chunk.js","sourcesContent":["// Degree precision\n// This allows to identify unique coordinates\n// Note: Using a precision of 3,\n//       This scale is said to unambiguously recognize a neighborhood or street\n//       It works in our case\nfunction applyPrecision(coordinates: [number, number]) {\n  return coordinates.map(c => Number(c.toFixed(3)));\n}\n\n// Get unique coordinates to use for mapping\nexport function uniqueCoordinates(data: {\n  features: Array<{\n    geometry: {\n      coordinates: [number, number];\n    };\n  }>;\n}): Array<[number, number]> {\n  const set = new Set<string>(\n    data.features.map(feature =>\n      applyPrecision(feature.geometry.coordinates).join(',')\n    )\n  );\n  return Array.from(set).map(coordinates => {\n    const str = coordinates.split(',');\n    return [Number(str[0]), Number(str[1])];\n  });\n}\n\nexport function circlesSource(\n  centers: Array<[number, number]>,\n  radiusInKm: number,\n  points: number = 64\n) {\n  const features = centers.map(center => {\n    const coords = {\n      latitude: center[1],\n      longitude: center[0]\n    };\n    const km = radiusInKm;\n\n    const ret = [];\n    const distanceX =\n      km / (111.32 * Math.cos((coords.latitude * Math.PI) / 180));\n    const distanceY = km / 110.574;\n\n    var theta, x, y;\n    for (var i = 0; i < points; i++) {\n      theta = (i / points) * (2 * Math.PI);\n      x = distanceX * Math.cos(theta);\n      y = distanceY * Math.sin(theta);\n\n      ret.push([coords.longitude + x, coords.latitude + y]);\n    }\n\n    ret.push(ret[0]);\n\n    return {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [ret]\n      }\n    };\n  });\n\n  return {\n    type: 'geojson',\n    data: {\n      type: 'FeatureCollection',\n      features\n    }\n  };\n}\nexport function lineSource(\n  data: {\n    features: Array<{\n      properties: { [key: string]: any };\n      geometry: {\n        coordinates: [number, number];\n      };\n    }>;\n  },\n  centers: Array<[number, number]>,\n  distanceInKm: number\n) {\n  let features: any[] = [];\n  centers.forEach(center => {\n    const properties = data.features\n      .filter(\n        f =>\n          applyPrecision(f.geometry.coordinates).join(',') === center.join(',')\n      )\n      .map(f => f.properties);\n\n    features = features.concat(\n      properties.map(property => {\n        const bearing = property['Blast Bearing'];\n        const distanceX =\n          distanceInKm / (111.32 * Math.cos((center[1] * Math.PI) / 180));\n        const distanceY = distanceInKm / 110.574;\n\n        var theta, x, y;\n        theta = (bearing * Math.PI) / 180;\n        x = distanceX * Math.cos(theta);\n        y = distanceY * Math.sin(theta);\n\n        return {\n          type: 'Feature',\n          properties: property,\n          geometry: {\n            type: 'LineString',\n            coordinates: [center, [center[0] + x, center[1] + y]]\n          }\n        };\n      })\n    );\n  });\n\n  return {\n    type: 'geojson',\n    data: {\n      type: 'FeatureCollection',\n      features\n    }\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport ReactMapboxGl, {\n  ZoomControl,\n  Source,\n  Feature,\n  Layer\n} from 'react-mapbox-gl';\n\nimport { circlesSource, uniqueCoordinates, lineSource } from '../utils/data';\nimport { FilterValue } from './Filter';\n\nconst Map = ReactMapboxGl({\n  accessToken: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN!\n});\n\nconst style = {\n  mapboxStyle: 'mapbox://styles/codeforafrica/cju18pxjf12yj1gp7qhdmgicd'\n};\n\ninterface Props {\n  data: any;\n  filters: Array<FilterValue>;\n}\n\nfunction Mapbox({ data, filters }: Props) {\n  const sensorCoordinates = uniqueCoordinates(data);\n  const [blastLinesFilter, setBlastLinesFilter] = useState(['all'] as any[]);\n\n  useEffect(() => {\n    const filtersToApply: any[] = ['all'];\n    filters.forEach(filter => {\n      const found = filtersToApply.find(f => f[1] === filter[0]);\n      if (found) {\n        found.push(filter[1]);\n      } else {\n        filtersToApply.push(['in', ...filter]);\n      }\n    });\n    setBlastLinesFilter(filtersToApply);\n  }, [filters]);\n\n  return (\n    <Map\n      style={style.mapboxStyle}\n      center={[39.299, -5.368]}\n      zoom={[7.99]}\n      containerStyle={{\n        height: '100vh',\n        width: '100vw'\n      }}\n    >\n      <ZoomControl position=\"bottom-right\" />\n\n      <Layer\n        id=\"blast_sensor_location\"\n        type=\"circle\"\n        paint={{\n          'circle-color': '#463354',\n          'circle-opacity': 0.8\n        }}\n      >\n        {sensorCoordinates.map(coordinates => (\n          <Feature coordinates={coordinates} />\n        ))}\n      </Layer>\n\n      <Source\n        id=\"blast_radius_source\"\n        geoJsonSource={circlesSource(sensorCoordinates, 30)}\n      />\n      <Layer\n        id=\"blast_radius\"\n        type=\"fill\"\n        sourceId=\"blast_radius_source\"\n        paint={{\n          'fill-color': '#463354',\n          'fill-opacity': 0.6\n        }}\n      />\n\n      <Source\n        id=\"blast_lines_source\"\n        geoJsonSource={lineSource(data, sensorCoordinates, 30)}\n      />\n\n      <Layer\n        id=\"blast_lines\"\n        type=\"line\"\n        sourceId=\"blast_lines_source\"\n        layout={{\n          'line-join': 'round',\n          'line-cap': 'round'\n        }}\n        paint={{\n          'line-color': '#1798A6',\n          'line-width': 1\n        }}\n        filter={blastLinesFilter}\n      />\n    </Map>\n  );\n}\n\nexport default Mapbox;\n","import React, { createRef } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    zIndex: 1,\n    position: 'absolute',\n    width: '10rem',\n    lineHeight: '15px',\n    marginTop: '10rem',\n    marginLeft: '4rem',\n    marginBottom: '4rem',\n    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',\n    overflow: 'scroll',\n    backgroundColor: 'white'\n  },\n  header: {\n    display: 'inline-block',\n    height: '3rem',\n    width: '100%',\n    backgroundColor: '#4a345a',\n    color: 'white',\n    padding: ' 0.5rem'\n  },\n  filterGroup: {\n    marginLeft: '1.5rem',\n    marginRight: '1.5rem',\n    '& input[type=\"checkbox\"]': {\n      appearance: 'radio',\n      marginBottom: '10px'\n    }\n  },\n  filterTitle: {\n    color: 'grey'\n  },\n  filterLabel: {\n    display: 'flex',\n    alignItems: 'baseline',\n    color: 'grey'\n  }\n}));\n\nexport type FilterValue = [string, any];\n\ninterface Props {\n  onFilter: (filter: Array<FilterValue>) => void;\n}\n\nexport default function Filter({ onFilter }: Props) {\n  const classes = useStyles();\n  const filterGroupRef = createRef<HTMLDivElement>();\n\n  const handleFilter = () => {\n    if (filterGroupRef.current) {\n      const inputs = filterGroupRef.current.querySelectorAll(\n        'input[type=checkbox]'\n      );\n      const checked = Array.from(inputs).filter(\n        (element: any) => element.checked\n      ) as HTMLInputElement[];\n      onFilter(checked.map(e => [e.name, e.value]));\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        <h2>Filters</h2>\n      </div>\n      <div\n        ref={filterGroupRef}\n        className={classes.filterGroup}\n        onClick={handleFilter}\n      >\n        <h4 className={classes.filterTitle}>Tide</h4>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Tide\" value=\"Spring\" />\n          Spring\n        </label>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Tide\" value=\"Normal\" />\n          Normal\n        </label>\n        <h4 className={classes.filterTitle}>Tidal state</h4>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Tidal State\" value=\"Falling\" />\n          Falling\n        </label>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Tidal State\" value=\"High\" />\n          High\n        </label>\n        <h4 className={classes.filterTitle}>Time of Day</h4>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Time of Day\" value=\"AM\" />\n          AM\n        </label>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Time of Day\" value=\"PM\" />\n          PM\n        </label>\n        <h4 className={classes.filterTitle}>Day</h4>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Day\" value=\"Monday\" />\n          Monday\n        </label>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Day\" value=\"Tuesday\" />\n          Tuesday\n        </label>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Day\" value=\"Wednesday\" />\n          Wednesday\n        </label>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Day\" value=\"Tuesday\" />\n          Thursday\n        </label>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Day\" value=\"Friday\" />\n          Friday\n        </label>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Day\" value=\"Saturday\" />\n          Saturday\n        </label>\n        <label className={classes.filterLabel}>\n          <input type=\"checkbox\" name=\"Day\" value=\"Sunday\" />\n          Sunday\n        </label>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    zIndex: 1,\n    flexGrow: 1,\n    position: 'absolute',\n    top: '3rem',\n    right: '2rem',\n    width: '24rem',\n    height: '5rem',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',\n    backgroundColor: 'white'\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  label: {\n    color: '#010c14',\n    marginLeft: '0.4rem'\n  },\n  sensorNumber: {\n    color: '#4a345a'\n  },\n  blastsNumber: {\n    color: '#053354'\n  }\n}));\n\ninterface Props {\n  numberOfSensors: number;\n  numberOfBlasts: number;\n}\n\nexport default function Counter({ numberOfSensors, numberOfBlasts }: Props) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div className={classes.container}>\n        <h1 className={classes.sensorNumber}>{numberOfSensors}</h1>\n        <p className={classes.label}>Blast sensors</p>\n      </div>\n\n      <div className={classes.container}>\n        <h1 className={classes.blastsNumber}>{numberOfBlasts}</h1>\n        <p className={classes.label}>Blast detected</p>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment, useState } from 'react';\nimport Mapbox from './components/Mapbox';\nimport Filter, { FilterValue } from './components/Filter';\nimport Counter from './components/Counter';\n\nimport blastData from './data/blasts.geo.json';\nimport { uniqueCoordinates } from './utils/data';\n\nfunction App() {\n  const [filters, setFilter] = useState([] as Array<FilterValue>);\n  const coordinates = uniqueCoordinates(blastData);\n  return (\n    <Fragment>\n      <Filter onFilter={setFilter} />\n      <Counter\n        numberOfSensors={coordinates.length}\n        numberOfBlasts={blastData.features.length}\n      />\n      <Mapbox data={blastData} filters={filters} />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}